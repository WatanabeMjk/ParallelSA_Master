package main

import (
	"fmt"
	"log"
	"math"
	"math/rand"
	"time"
)

func distance(point1 [2]int, point2 [2]int) float64 {
	var dx int = point1[0] - point2[0]
	var dy int = point1[1] - point2[1]

	return math.Sqrt(float64(dx*dx) + float64(dy*dy))
}

func totalDistance(points [][2]int) float64 {
	var length int = len(points)
	var total float64 = 0.0

	for i := 1; i < length; i++ {
		total += distance(points[i], points[i-1])
	}

	total += distance(points[0], points[length-1])

	return total
}

func swap(array [][2]int, index1 int, index2 int) {
	var tmp [2]int = array[index1]
	array[index1] = array[index2]
	array[index2] = tmp
}

func shouldChange(delta float64, t float64) bool {
	if delta <= 0 {
		return true
	}
	var frand float64 = rand.Float64() / 32767.0
	if frand < math.Exp(-delta/t) {
		return true
	}
	return false
}

func sa(route [][2]int, numberOfCities int, n int, initialT float64, finalT float64, coolingRate float64) {
	var randomIndex1 int
	var randomIndex2 int
	var currentTotalDistance float64
	var newTotalDistance float64

	rand.Seed(time.Now().UnixNano())
	currentTotalDistance = totalDistance(route)

	for t := initialT; t > finalT; t *= coolingRate {
		for i := 0; i < n; i++ {
			randomIndex1 = rand.Int() % numberOfCities
			randomIndex2 = rand.Int() % numberOfCities

			swap(route, randomIndex1, randomIndex2)

			newTotalDistance = totalDistance(route)

			if shouldChange(newTotalDistance-currentTotalDistance, t) {
				currentTotalDistance = newTotalDistance
			} else {
				swap(route, randomIndex1, randomIndex2)
			}
		}
	}
}

func orderCrossOver(routeA [][2]int, routeB [][2]int, afterRoute [][2]int, numberOfCities int) {
	var numberSplit int = int(math.Trunc(float64(numberOfCities) / 3.0))
	fmt.Printf("numberSplit:%d\n", numberSplit)
	for i := numberSplit; i < (numberSplit * 2); i++ {
		afterRoute[i] = routeA[i]
		//fmt.Printf("%d個目:Route:%d\n", i, afterRoute[i])
	}

	var f int = 0
	var i int = 0
	for f < numberSplit {
		var h int = 0
		for j := numberSplit; j < (numberSplit * 2); j++ {
			if routeB[i] == afterRoute[j] {
				//fmt.Printf("かぶり発生\n")
				break
			} else {
				h++
				//fmt.Printf("h:%d", h)
				if h == numberSplit {
					//fmt.Printf("f:%d ,", f)
					afterRoute[f] = routeB[i]
					//fmt.Printf("%d個目:Route:%d\n", f, afterRoute[f])
					f++
					//fmt.Printf("i:%d, f:%d. j:%d \n", i, f, j)
				}
			}
		}
		i++
	}

	f = (numberSplit * 2)
	for f < numberOfCities {
		var h int = 0
		for j := numberSplit; j < (numberSplit * 2); j++ {
			if routeB[i] == afterRoute[j] {
				//fmt.Printf("かぶり発生\n")
				break
			} else {
				h++
				//fmt.Printf("h:%d", h)
				if h == numberSplit {
					//fmt.Printf("f:%d ,", f)
					afterRoute[f] = routeB[i]
					//fmt.Printf("%d個目:Route:%d\n", f, afterRoute[f])
					f++
					//fmt.Printf("2:i:%d, f:%d. j:%d \n", i, f, j)
				}
			}
		}
		i++
	}
}

func BubbleSort(a []float64) {
	for i := 0; i < len(a)-1; i++ {
		for j := 0; j < len(a)-i-1; j++ {
			if a[j] > a[j+1] {
				a[j], a[j+1] = a[j+1], a[j]
			}
		}
	}
}

func bestOfRouteAB(distanceA float64, distanceB float64, distanceC float64, distanceD float64, routeA [][2]int, routeB [][2]int, routeC [][2]int, routeD [][2]int, numberOfCities int) {
	sortDisc := make([]float64, 4)

	tempRouteA := make([][2]int, numberOfCities)
	tempRouteB := make([][2]int, numberOfCities)

	var firstDistance string = ""
	var secondDistance string = ""

	sortDisc[0] = distanceA
	sortDisc[1] = distanceB
	sortDisc[2] = distanceC
	sortDisc[3] = distanceD

	fmt.Printf("前No1:%f,No2:%f,No3:%f,No4:%f\n", sortDisc[0], sortDisc[1], sortDisc[2], sortDisc[3])

	BubbleSort(sortDisc)

	fmt.Printf("後No1:%f,No2:%f,No3:%f,No4:%f\n", sortDisc[0], sortDisc[1], sortDisc[2], sortDisc[3])

	switch sortDisc[0] {
	case distanceA:
		firstDistance = "A"
	case distanceB:
		firstDistance = "B"
	case distanceC:
		firstDistance = "C"
	case distanceD:
		firstDistance = "D"
	}

	switch sortDisc[1] {
	case distanceA:
		secondDistance = "A"
	case distanceB:
		secondDistance = "B"
	case distanceC:
		secondDistance = "C"
	case distanceD:
		secondDistance = "D"
	}

	fmt.Printf("文字列No:1%s,No2:%s\n", firstDistance, secondDistance)

	switch firstDistance {
	case "A":
		for i := 0; i < numberOfCities; i++ {
			tempRouteA[i] = routeA[i]
		}
	case "B":
		for i := 0; i < numberOfCities; i++ {
			tempRouteA[i] = routeB[i]
		}
	case "C":
		for i := 0; i < numberOfCities; i++ {
			tempRouteA[i] = routeC[i]
		}
	case "D":
		for i := 0; i < numberOfCities; i++ {
			tempRouteA[i] = routeD[i]
		}
	}

	switch secondDistance {
	case "A":
		for i := 0; i < numberOfCities; i++ {
			tempRouteB[i] = routeA[i]
		}
	case "B":
		for i := 0; i < numberOfCities; i++ {
			tempRouteB[i] = routeB[i]
		}
	case "C":
		for i := 0; i < numberOfCities; i++ {
			tempRouteB[i] = routeC[i]
		}
	case "D":
		for i := 0; i < numberOfCities; i++ {
			tempRouteB[i] = routeD[i]
		}
	}

	for i := 0; i < numberOfCities; i++ {
		routeA[i] = tempRouteA[i]
	}

	for i := 0; i < numberOfCities; i++ {
		routeB[i] = tempRouteB[i]
	}

}

func main() {
	routeA := [][2]int{{3013,5763},{3016,5710},{3023,5758},{3025,5685},{3025,5695},{3025,5758},{3030,5696},{3031,5681},{3040,5646},{3040,5678},{3043,5743},{3046,5655},{3048,5651},{3050,5645},{3050,5666},{3055,5786},{3056,5688},{3060,5768},{3061,5690},{3063,5616},{3068,5703},{3068,5751},{3071,5660},{3073,5673},{3073,5731},{3075,5675},{3078,5778},{3083,5675},{3086,5636},{3090,5551},{3091,5630},{3093,5548},{3093,5555},{3095,5665},{3096,5555},{3096,5753},{3100,5568},{3100,5625},{3101,5656},{3103,5660},{3103,5688},{3108,5601},{3108,5651},{3108,5701},{3108,5751},{3108,5760},{3108,5783},{3110,5566},{3110,5598},{3110,5701},{3111,5646},{3116,5575},{3116,5700},{3116,5708},{3118,5628},{3118,5693},{3120,5575},{3120,5723},{3121,5566},{3121,5631},{3123,5563},{3123,5588},{3123,5711},{3125,5533},{3125,5595},{3125,5683},{3125,5716},{3125,5720},{3128,5643},{3130,5586},{3130,5601},{3130,5706},{3130,5710},{3130,5713},{3130,5715},{3130,5720},{3130,5770},{3131,5520},{3133,5780},{3133,5783},{3133,5788},{3135,5538},{3135,5663},{3135,5778},{3135,5780},{3135,5798},{3136,5508},{3136,5566},{3136,5585},{3138,5586},{3138,5796},{3140,5636},{3140,5778},{3141,5491},{3141,5668},{3143,5523},{3145,5541},{3145,5638},{3146,5516},{3146,5683},{3148,5483},{3150,5471},{3150,5516},{3150,5603},{3150,5711},{3151,5496},{3151,5576},{3151,5596},{3151,5753},{3151,5758},{3153,5558},{3153,5583},{3153,5605},{3155,5555},{3155,5795},{3156,5455},{3158,5546},{3158,5761},{3160,5585},{3160,5675},{3161,5681},{3163,5500},{3163,5691},{3165,5683},{3166,5616},{3166,5663},{3166,5791},{3168,5465},{3168,5476},{3168,5543},{3168,5595},{3168,5613},{3168,5768},{3170,5610},{3171,5533},{3173,5441},{3173,5598},{3175,5501},{3175,5546},{3175,5606},{3176,5480},{3176,5601},{3176,5625},{3178,5433},{3178,5475},{3178,5515},{3178,5625},{3180,5471},{3180,5533},{3180,5570},{3180,5613},{3181,5466},{3181,5518},{3181,5521},{3181,5550},{3181,5591},{3181,5596},{3183,5416},{3183,5576},{3183,5593},{3183,5598},{3183,5725},{3185,5600},{3186,5420},{3186,5728},{3188,5543},{3188,5596},{3188,5600},{3188,5733},{3188,5748},{3188,5751},{3190,5415},{3190,5478},{3190,5513},{3190,5546},{3190,5588},{3191,5473},{3191,5593},{3191,5601},{3191,5725},{3191,5771},{3195,5788},{3196,5505},{3196,5751},{3198,5416},{3198,5568},{3198,5741},{3200,5413},{3200,5548},{3200,5716},{3200,5730},{3200,5758},{3201,5420},{3201,5506},{3201,5733},{3201,5746},{3203,5418},{3203,5456},{3203,5566},{3203,5578},{3205,5463},{3205,5486},{3205,5538},{3206,5376},{3206,5635},{3208,5425},{3208,5565},{3208,5686},{3208,5791},{3210,5375},{3210,5486},{3210,5741},{3210,5781},{3211,5406},{3211,5756},{3215,5420},{3215,5488},{3215,5495},{3215,5505},{3215,5611},{3216,5375},{3216,5411},{3216,5501},{3216,5595},{3218,5503},{3218,5528},{3218,5606},{3220,5406},{3220,5800},{3221,5560},{3221,5601},{3223,5498},{3223,5573},{3223,5650},{3225,5575},{3225,5651},{3225,5730},{3226,5491},{3226,5590},{3228,5805},{3230,5533},{3232,5807},{3233,5588},{3233,5596},{3233,5705},{3233,5780},{3233,5793},{3233,5813},{3235,5383},{3235,5413},{3235,5583},{3235,5655},{3235,5720},{3236,5418},{3236,5476},{3236,5785},{3236,5798},{3238,5435},{3238,5466},{3238,5506},{3238,5668},{3238,5750},{3238,5760},{3240,5535},{3240,5671},{3240,5690},{3241,5616},{3241,5633},{3241,5738},{3241,5758},{3241,5815},{3243,5635},{3245,5503},{3245,5603},{3246,5431},{3246,5523},{3246,5616},{3248,5351},{3248,5371},{3248,5635},{3248,5775},{3250,5401},{3250,5441},{3250,5603},{3251,5348},{3251,5453},{3251,5458},{3251,5468},{3251,5775},{3253,5456},{3253,5550},{3253,5713},{3256,5341},{3256,5688},{3256,5736},{3256,5748},{3258,5338},{3260,5558},{3261,5460},{3261,5583},{3261,5648},{3263,5330},{3263,5390},{3263,5511},{3263,5635},{3263,5675},{3265,5425},{3265,5445},{3266,5361},{3266,5545},{3268,5463},{3268,5688},{3268,5763},{3268,5813},{3270,5396},{3271,5560},{3271,5746},{3275,5348},{3275,5373},{3275,5440},{3275,5565},{3275,5775},{3276,5543},{3276,5563},{3276,5778},{3276,5788},{3278,5383},{3278,5590},{3280,5580},{3280,5641},{3280,5705},{3281,5651},{3283,5476},{3283,5548},{3283,5618},{3283,5643},{3283,5771},{3285,5768},{3286,5591},{3286,5646},{3288,5541},{3288,5551},{3288,5680},{3290,5523},{3290,5608},{3290,5613},{3291,5496},{3291,5773},{3293,5395},{3293,5426},{3293,5551},{3293,5711},{3293,5765},{3295,5421},{3296,5540},{3298,5458},{3298,5805},{3300,5363},{3300,5513},{3300,5578},{3301,5370},{3301,5395},{3301,5505},{3301,5648},{3303,5700},{3305,5406},{3305,5415},{3305,5648},{3306,5585},{3308,5596},{3308,5618},{3308,5743},{3310,5513},{3310,5763},{3310,5773},{3311,5481},{3311,5483},{3311,5598},{3313,5829},{3313,5493},{3313,5715},{3315,5415},{3316,5496},{3316,5758},{3318,5390},{3318,5570},{3318,5746},{3320,5380},{3320,5475},{3320,5678},{3321,5438},{3321,5668},{3323,5385},{3323,5438},{3323,5713},{3325,5390},{3325,5391},{3325,5401},{3325,5433},{3325,5601},{3325,5733},{3325,5801},{3326,5378},{3326,5441},{3326,5510},{3326,5511},{3328,5393},{3330,5635},{3333,5478},{3333,5646},{3333,5693},{3333,5795},{3335,5561},{3335,5563},{3336,5366},{3336,5648},{3338,5508},{3338,5641},{3338,5755},{3340,5468},{3340,5831},{3341,5650},{3341,5563},{3341,5706},{3345,5453},{3345,5773},{3346,5420},{3346,5465},{3346,5466},{3346,5511},{3346,5520},{3346,5561},{3348,5515},{3348,5556},{3348,5615},{3348,5648},{3350,5521},{3350,5675},{3350,5686},{3351,5378},{3351,5491},{3351,5640},{3351,5783},{3353,5443},{3353,5460},{3353,5690},{3353,5693},{3353,5688},{3354,5819},{3355,5566},{3355,5690},{3356,5385},{3358,5730},{3358,5758},{3358,5808},{3360,5431},{3360,5533},{3360,5635},{3360,5713},{3360,5798},{3361,5371},{3361,5763},{3361,5828},{3365,5380},{3365,5753},{3366,5420},{3368,5345},{3368,5355},{3368,5465},{3368,5756},{3371,5453},{3371,5808},{3371,5826},{3373,5475},{3373,5633},{3373,5783},{3375,5528},{3375,5646},{3375,5748},{3375,5761},{3376,5835},{3380,5400},{3380,5825},{3381,5555},{3381,5755},{3383,5630},{3385,5516},{3385,5688},{3385,5701},{3385,5768},{3386,5555},{3386,5700},{3386,5751},{3386,5761},{3388,5350},{3388,5471},{3388,5645},{3388,5738},{3388,5740},{3388,5766},{3388,5841},{3390,5515},{3390,5683},{3391,5778},{3393,5526},{3393,5568},{3393,5625},{3393,5746},{3393,5816},{3395,5585},{3395,5675},{3395,5790},{3395,5823},{3396,5710},{3396,5828},{3398,5398},{3398,5790},{3398,5815},{3398,5825},{3398,5828},{3400,5566},{3400,5825},{3401,5765},{3403,5428},{3403,5565},{3403,5783},{3403,5813},{3405,5478},{3405,5588},{3405,5620},{3406,5393},{3406,5450},{3406,5630},{3406,5638},{3406,5735},{3406,5771},{3408,5738},{3409,5621},{3410,5800},{3411,5395},{3413,5640},{3415,5695},{3415,5801},{3415,5817},{3416,5383},{3416,5385},{3416,5466},{3416,5668},{3418,5378},{3418,5573},{3418,5793},{3418,5633},{3420,5393},{3420,5475},{3420,5621},{3420,5698},{3420,5710},{3420,5778},{3420,5786},{3421,5700},{3423,5573},{3423,5686},{3425,5593},{3425,5668},{3426,5393},{3426,5431},{3426,5745},{3428,5498},{3428,5523},{3428,5621},{3428,5691},{3428,5761},{3429,5638},{3430,5596},{3430,5723},{3430,5773},{3431,5680},{3431,5700},{3431,5721},{3431,5735},{3431,5680},{3433,5545},{3433,5565},{3433,5723},{3433,5771},{3433,5671},{3435,5576},{3435,5665},{3435,5730},{3435,5743},{3435,5785},{3435,5639},{3436,5376},{3436,5383},{3436,5406},{3436,5516},{3436,5551},{3436,5578},{3436,5640},{3436,5705},{3436,5706},{3436,5756},{3437,5522},{3438,5654},{3438,5628},{3438,5638},{3438,5676},{3440,5378},{3440,5633},{3440,5653},{3440,5716},{3440,5733},{3440,5766},{3440,5788},{3441,5640},{3441,5646},{3441,5728},{3441,5773},{3441,5642},{3443,5598},{3443,5741},{3443,5771},{3443,5788},{3444,5644},{3444,5607},{3445,5578},{3445,5616},{3445,5625},{3445,5628},{3445,5760},{3445,5639},{3446,5771},{3446,5785},{3448,5433},{3448,5563},{3448,5565},{3448,5685},{3449,5603},{3450,5558},{3450,5638},{3451,5525},{3451,5679},{3452,5639},{3452,5627},{3453,5630},{3453,5631},{3455,5588},{3456,5570},{3458,5583},{3458,5669},{3458,5625},{3460,5455},{3460,5548},{3460,5613},{3460,5635},{3463,5561},{3463,5596},{3463,5633},{3463,5661},{3464,5606},{3465,5523},{3465,5586},{3465,5660},{3465,5671},{3465,5675},{3466,5621},{3466,5416},{3466,5526},{3466,5600},{3468,5568},{3468,5673},{3469,5621},{3470,5590},{3471,5607},{3471,5541},{3471,5553},{3471,5595},{3472,5622},{3473,5526},{3473,5571},{3473,5603},{3474,5609},{3475,5533},{3475,5568},{3476,5622},{3476,5602},{3476,5638},{3476,5621},{3476,5575},{3478,5605},{3479,5635},{3480,5491},{3480,5523},{3480,5536},{3480,5621},{3480,5623},{3480,5633},{3480,5608},{3481,5604},{3481,5610},{3481,5618},{3482,5613},{3483,5611},{3483,5621},{3483,5623},{3485,5608},{3485,5611},{3485,5621},{3485,5623},{3485,5617},{3486,5605},{3486,5486},{3486,5616},{3487,5613},{3487,5625},{3487,5602},{3488,5615},{3488,5618},{3488,5620},{3488,5621},{3488,5623},{3488,5606},{3490,5495},{3490,5528},{3490,5610},{3490,5613},{3490,5615},{3490,5618},{3490,5616},{3490,5619},{3490,5620},{3490,5615},{3496,5495},{3492,5615}}
	routeB := [][2]int{{3013,5763},{3016,5710},{3023,5758},{3025,5685},{3025,5695},{3025,5758},{3030,5696},{3031,5681},{3040,5646},{3040,5678},{3043,5743},{3046,5655},{3048,5651},{3050,5645},{3050,5666},{3055,5786},{3056,5688},{3060,5768},{3061,5690},{3063,5616},{3068,5703},{3068,5751},{3071,5660},{3073,5673},{3073,5731},{3075,5675},{3078,5778},{3083,5675},{3086,5636},{3090,5551},{3091,5630},{3093,5548},{3093,5555},{3095,5665},{3096,5555},{3096,5753},{3100,5568},{3100,5625},{3101,5656},{3103,5660},{3103,5688},{3108,5601},{3108,5651},{3108,5701},{3108,5751},{3108,5760},{3108,5783},{3110,5566},{3110,5598},{3110,5701},{3111,5646},{3116,5575},{3116,5700},{3116,5708},{3118,5628},{3118,5693},{3120,5575},{3120,5723},{3121,5566},{3121,5631},{3123,5563},{3123,5588},{3123,5711},{3125,5533},{3125,5595},{3125,5683},{3125,5716},{3125,5720},{3128,5643},{3130,5586},{3130,5601},{3130,5706},{3130,5710},{3130,5713},{3130,5715},{3130,5720},{3130,5770},{3131,5520},{3133,5780},{3133,5783},{3133,5788},{3135,5538},{3135,5663},{3135,5778},{3135,5780},{3135,5798},{3136,5508},{3136,5566},{3136,5585},{3138,5586},{3138,5796},{3140,5636},{3140,5778},{3141,5491},{3141,5668},{3143,5523},{3145,5541},{3145,5638},{3146,5516},{3146,5683},{3148,5483},{3150,5471},{3150,5516},{3150,5603},{3150,5711},{3151,5496},{3151,5576},{3151,5596},{3151,5753},{3151,5758},{3153,5558},{3153,5583},{3153,5605},{3155,5555},{3155,5795},{3156,5455},{3158,5546},{3158,5761},{3160,5585},{3160,5675},{3161,5681},{3163,5500},{3163,5691},{3165,5683},{3166,5616},{3166,5663},{3166,5791},{3168,5465},{3168,5476},{3168,5543},{3168,5595},{3168,5613},{3168,5768},{3170,5610},{3171,5533},{3173,5441},{3173,5598},{3175,5501},{3175,5546},{3175,5606},{3176,5480},{3176,5601},{3176,5625},{3178,5433},{3178,5475},{3178,5515},{3178,5625},{3180,5471},{3180,5533},{3180,5570},{3180,5613},{3181,5466},{3181,5518},{3181,5521},{3181,5550},{3181,5591},{3181,5596},{3183,5416},{3183,5576},{3183,5593},{3183,5598},{3183,5725},{3185,5600},{3186,5420},{3186,5728},{3188,5543},{3188,5596},{3188,5600},{3188,5733},{3188,5748},{3188,5751},{3190,5415},{3190,5478},{3190,5513},{3190,5546},{3190,5588},{3191,5473},{3191,5593},{3191,5601},{3191,5725},{3191,5771},{3195,5788},{3196,5505},{3196,5751},{3198,5416},{3198,5568},{3198,5741},{3200,5413},{3200,5548},{3200,5716},{3200,5730},{3200,5758},{3201,5420},{3201,5506},{3201,5733},{3201,5746},{3203,5418},{3203,5456},{3203,5566},{3203,5578},{3205,5463},{3205,5486},{3205,5538},{3206,5376},{3206,5635},{3208,5425},{3208,5565},{3208,5686},{3208,5791},{3210,5375},{3210,5486},{3210,5741},{3210,5781},{3211,5406},{3211,5756},{3215,5420},{3215,5488},{3215,5495},{3215,5505},{3215,5611},{3216,5375},{3216,5411},{3216,5501},{3216,5595},{3218,5503},{3218,5528},{3218,5606},{3220,5406},{3220,5800},{3221,5560},{3221,5601},{3223,5498},{3223,5573},{3223,5650},{3225,5575},{3225,5651},{3225,5730},{3226,5491},{3226,5590},{3228,5805},{3230,5533},{3232,5807},{3233,5588},{3233,5596},{3233,5705},{3233,5780},{3233,5793},{3233,5813},{3235,5383},{3235,5413},{3235,5583},{3235,5655},{3235,5720},{3236,5418},{3236,5476},{3236,5785},{3236,5798},{3238,5435},{3238,5466},{3238,5506},{3238,5668},{3238,5750},{3238,5760},{3240,5535},{3240,5671},{3240,5690},{3241,5616},{3241,5633},{3241,5738},{3241,5758},{3241,5815},{3243,5635},{3245,5503},{3245,5603},{3246,5431},{3246,5523},{3246,5616},{3248,5351},{3248,5371},{3248,5635},{3248,5775},{3250,5401},{3250,5441},{3250,5603},{3251,5348},{3251,5453},{3251,5458},{3251,5468},{3251,5775},{3253,5456},{3253,5550},{3253,5713},{3256,5341},{3256,5688},{3256,5736},{3256,5748},{3258,5338},{3260,5558},{3261,5460},{3261,5583},{3261,5648},{3263,5330},{3263,5390},{3263,5511},{3263,5635},{3263,5675},{3265,5425},{3265,5445},{3266,5361},{3266,5545},{3268,5463},{3268,5688},{3268,5763},{3268,5813},{3270,5396},{3271,5560},{3271,5746},{3275,5348},{3275,5373},{3275,5440},{3275,5565},{3275,5775},{3276,5543},{3276,5563},{3276,5778},{3276,5788},{3278,5383},{3278,5590},{3280,5580},{3280,5641},{3280,5705},{3281,5651},{3283,5476},{3283,5548},{3283,5618},{3283,5643},{3283,5771},{3285,5768},{3286,5591},{3286,5646},{3288,5541},{3288,5551},{3288,5680},{3290,5523},{3290,5608},{3290,5613},{3291,5496},{3291,5773},{3293,5395},{3293,5426},{3293,5551},{3293,5711},{3293,5765},{3295,5421},{3296,5540},{3298,5458},{3298,5805},{3300,5363},{3300,5513},{3300,5578},{3301,5370},{3301,5395},{3301,5505},{3301,5648},{3303,5700},{3305,5406},{3305,5415},{3305,5648},{3306,5585},{3308,5596},{3308,5618},{3308,5743},{3310,5513},{3310,5763},{3310,5773},{3311,5481},{3311,5483},{3311,5598},{3313,5829},{3313,5493},{3313,5715},{3315,5415},{3316,5496},{3316,5758},{3318,5390},{3318,5570},{3318,5746},{3320,5380},{3320,5475},{3320,5678},{3321,5438},{3321,5668},{3323,5385},{3323,5438},{3323,5713},{3325,5390},{3325,5391},{3325,5401},{3325,5433},{3325,5601},{3325,5733},{3325,5801},{3326,5378},{3326,5441},{3326,5510},{3326,5511},{3328,5393},{3330,5635},{3333,5478},{3333,5646},{3333,5693},{3333,5795},{3335,5561},{3335,5563},{3336,5366},{3336,5648},{3338,5508},{3338,5641},{3338,5755},{3340,5468},{3340,5831},{3341,5650},{3341,5563},{3341,5706},{3345,5453},{3345,5773},{3346,5420},{3346,5465},{3346,5466},{3346,5511},{3346,5520},{3346,5561},{3348,5515},{3348,5556},{3348,5615},{3348,5648},{3350,5521},{3350,5675},{3350,5686},{3351,5378},{3351,5491},{3351,5640},{3351,5783},{3353,5443},{3353,5460},{3353,5690},{3353,5693},{3353,5688},{3354,5819},{3355,5566},{3355,5690},{3356,5385},{3358,5730},{3358,5758},{3358,5808},{3360,5431},{3360,5533},{3360,5635},{3360,5713},{3360,5798},{3361,5371},{3361,5763},{3361,5828},{3365,5380},{3365,5753},{3366,5420},{3368,5345},{3368,5355},{3368,5465},{3368,5756},{3371,5453},{3371,5808},{3371,5826},{3373,5475},{3373,5633},{3373,5783},{3375,5528},{3375,5646},{3375,5748},{3375,5761},{3376,5835},{3380,5400},{3380,5825},{3381,5555},{3381,5755},{3383,5630},{3385,5516},{3385,5688},{3385,5701},{3385,5768},{3386,5555},{3386,5700},{3386,5751},{3386,5761},{3388,5350},{3388,5471},{3388,5645},{3388,5738},{3388,5740},{3388,5766},{3388,5841},{3390,5515},{3390,5683},{3391,5778},{3393,5526},{3393,5568},{3393,5625},{3393,5746},{3393,5816},{3395,5585},{3395,5675},{3395,5790},{3395,5823},{3396,5710},{3396,5828},{3398,5398},{3398,5790},{3398,5815},{3398,5825},{3398,5828},{3400,5566},{3400,5825},{3401,5765},{3403,5428},{3403,5565},{3403,5783},{3403,5813},{3405,5478},{3405,5588},{3405,5620},{3406,5393},{3406,5450},{3406,5630},{3406,5638},{3406,5735},{3406,5771},{3408,5738},{3409,5621},{3410,5800},{3411,5395},{3413,5640},{3415,5695},{3415,5801},{3415,5817},{3416,5383},{3416,5385},{3416,5466},{3416,5668},{3418,5378},{3418,5573},{3418,5793},{3418,5633},{3420,5393},{3420,5475},{3420,5621},{3420,5698},{3420,5710},{3420,5778},{3420,5786},{3421,5700},{3423,5573},{3423,5686},{3425,5593},{3425,5668},{3426,5393},{3426,5431},{3426,5745},{3428,5498},{3428,5523},{3428,5621},{3428,5691},{3428,5761},{3429,5638},{3430,5596},{3430,5723},{3430,5773},{3431,5680},{3431,5700},{3431,5721},{3431,5735},{3431,5680},{3433,5545},{3433,5565},{3433,5723},{3433,5771},{3433,5671},{3435,5576},{3435,5665},{3435,5730},{3435,5743},{3435,5785},{3435,5639},{3436,5376},{3436,5383},{3436,5406},{3436,5516},{3436,5551},{3436,5578},{3436,5640},{3436,5705},{3436,5706},{3436,5756},{3437,5522},{3438,5654},{3438,5628},{3438,5638},{3438,5676},{3440,5378},{3440,5633},{3440,5653},{3440,5716},{3440,5733},{3440,5766},{3440,5788},{3441,5640},{3441,5646},{3441,5728},{3441,5773},{3441,5642},{3443,5598},{3443,5741},{3443,5771},{3443,5788},{3444,5644},{3444,5607},{3445,5578},{3445,5616},{3445,5625},{3445,5628},{3445,5760},{3445,5639},{3446,5771},{3446,5785},{3448,5433},{3448,5563},{3448,5565},{3448,5685},{3449,5603},{3450,5558},{3450,5638},{3451,5525},{3451,5679},{3452,5639},{3452,5627},{3453,5630},{3453,5631},{3455,5588},{3456,5570},{3458,5583},{3458,5669},{3458,5625},{3460,5455},{3460,5548},{3460,5613},{3460,5635},{3463,5561},{3463,5596},{3463,5633},{3463,5661},{3464,5606},{3465,5523},{3465,5586},{3465,5660},{3465,5671},{3465,5675},{3466,5621},{3466,5416},{3466,5526},{3466,5600},{3468,5568},{3468,5673},{3469,5621},{3470,5590},{3471,5607},{3471,5541},{3471,5553},{3471,5595},{3472,5622},{3473,5526},{3473,5571},{3473,5603},{3474,5609},{3475,5533},{3475,5568},{3476,5622},{3476,5602},{3476,5638},{3476,5621},{3476,5575},{3478,5605},{3479,5635},{3480,5491},{3480,5523},{3480,5536},{3480,5621},{3480,5623},{3480,5633},{3480,5608},{3481,5604},{3481,5610},{3481,5618},{3482,5613},{3483,5611},{3483,5621},{3483,5623},{3485,5608},{3485,5611},{3485,5621},{3485,5623},{3485,5617},{3486,5605},{3486,5486},{3486,5616},{3487,5613},{3487,5625},{3487,5602},{3488,5615},{3488,5618},{3488,5620},{3488,5621},{3488,5623},{3488,5606},{3490,5495},{3490,5528},{3490,5610},{3490,5613},{3490,5615},{3490,5618},{3490,5616},{3490,5619},{3490,5620},{3490,5615},{3496,5495},{3492,5615}}
	var n int = 1000
	var numberOfCities int = len(routeA)
	var initialT float64 = 100.0
	var finalT float64 = 0.8
	var coolingRate float64 = 0.9
	var distanceA float64 = 0.0
	var distanceB float64 = 0.0
	var distanceC float64 = 0.0
	var distanceD float64 = 0.0
	fmt.Printf("numberOfCities:%d\n",numberOfCities)

	for i := 0; i < numberOfCities; i++ {
		for j := 0; j < numberOfCities; j++ {
			if i != j {
				if routeA[i] == routeA[j] {
					fmt.Printf("route[%d]:%d, j:%d, かぶりが発生しています。\n", i, routeA[i], j)
					break
				}
			}
		}
	}
	routeC := make([][2]int, numberOfCities)
	routeD := make([][2]int, numberOfCities)

	log.Print("started.")
	start := time.Now()
	//SA_1回目
	fmt.Printf("\nSA1回目\n")

	saFinished := make(chan bool)

	saFuncs := []func(){
		func() {
			fmt.Printf("totalDistanceA:%f\n", totalDistance(routeA))
			sa(routeA, numberOfCities, n, initialT, finalT, coolingRate)
			distanceA = totalDistance(routeA)
			fmt.Printf("ResultTotalDistanceA:%f\n", distanceA)
			saFinished <- true
		},
		func() {
			fmt.Printf("totalDistanceB:%f\n", totalDistance(routeB))
			sa(routeB, numberOfCities, n, initialT, finalT, coolingRate)
			distanceB = totalDistance(routeB)
			fmt.Printf("ResultTotalDistanceB:%f\n", distanceB)
			saFinished <- true
		},
	}

	for _, sa := range saFuncs {
		go sa()
	}

	for i := 0; i < len(saFuncs); i++ {
		<-saFinished
	}

	coFinished := make(chan bool)

	coFuncs := []func(){
		func() {
			orderCrossOver(routeA, routeB, routeC, numberOfCities)
			distanceC = totalDistance(routeC)
			fmt.Printf("順序交叉の距離C:%f\n", distanceC)
			coFinished <- true
		},
		func() {
			orderCrossOver(routeB, routeA, routeD, numberOfCities)
			distanceD = totalDistance(routeD)
			fmt.Printf("順序交叉の距離D:%f\n", distanceD)
			coFinished <- true
		},
	}

	for _, orderCrossOver := range coFuncs {
		go orderCrossOver()
	}

	for i := 0; i < len(coFuncs); i++ {
		<-coFinished
	}

	fmt.Printf("前No1.%f,No2.%f\n", totalDistance(routeA), totalDistance(routeB))

	bestOfRouteAB(distanceA, distanceB, distanceC, distanceD, routeA, routeB, routeC, routeD, numberOfCities)

	fmt.Printf("後No1.%f,No2.%f\n", totalDistance(routeA), totalDistance(routeB))

	//SA_2回目
	fmt.Printf("\nSA2回目\n")

	saFinished_2 := make(chan bool)

	saFuncs_2 := []func(){
		func() {
			fmt.Printf("totalDistanceA:%f\n", totalDistance(routeA))
			sa(routeA, numberOfCities, n, initialT, finalT, coolingRate)
			distanceA = totalDistance(routeA)
			fmt.Printf("ResultTotalDistanceA:%f\n", distanceA)
			saFinished_2 <- true
		},
		func() {
			fmt.Printf("totalDistanceB:%f\n", totalDistance(routeB))
			sa(routeB, numberOfCities, n, initialT, finalT, coolingRate)
			distanceB = totalDistance(routeB)
			fmt.Printf("ResultTotalDistanceB:%f\n", distanceB)
			saFinished_2 <- true
		},
	}

	for _, sa := range saFuncs_2 {
		go sa()
	}

	for i := 0; i < len(saFuncs_2); i++ {
		<-saFinished_2
	}

	coFinished_2 := make(chan bool)

	coFuncs_2 := []func(){
		func() {
			orderCrossOver(routeA, routeB, routeC, numberOfCities)
			distanceC = totalDistance(routeC)
			fmt.Printf("順序交叉の距離C:%f\n", distanceC)
			coFinished_2 <- true
		},
		func() {
			orderCrossOver(routeB, routeA, routeD, numberOfCities)
			distanceD = totalDistance(routeD)
			fmt.Printf("順序交叉の距離D:%f\n", distanceD)
			coFinished_2 <- true
		},
	}

	for _, orderCrossOver := range coFuncs_2 {
		go orderCrossOver()
	}

	for i := 0; i < len(coFuncs_2); i++ {
		<-coFinished_2
	}

	fmt.Printf("前No1.%f,No2.%f\n", totalDistance(routeA), totalDistance(routeB))

	bestOfRouteAB(distanceA, distanceB, distanceC, distanceD, routeA, routeB, routeC, routeD, numberOfCities)

	fmt.Printf("後No1.%f,No2.%f\n", totalDistance(routeA), totalDistance(routeB))

	end := time.Now()
	fmt.Printf("実行時間：%f秒\n", (end.Sub(start)).Seconds())
	log.Print("end.")
}
